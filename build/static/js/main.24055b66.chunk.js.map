{"version":3,"sources":["InfoBox.js","util.js","osm-provider.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","osm","url","attribution","Map","countries","casesType","center","zoom","mapRef","useRef","useEffect","current","map","leafletElement","setTimeout","flyTo","scrollWheelZoom","ref","TileLayer","country","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","defaultOption","setDefaultOption","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","fetchCountries","countriesArr","item","id","_id","iso2","fetchSingleCountry","console","log","FormControl","Select","variant","onChange","e","countryCode","target","MenuItem","key","todayCases","todayRecovered","todayDeaths","toUpperCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24055b66.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./InfoBox.css\"\r\nimport { Card,CardContent, Typography } from '@material-ui/core'\r\n\r\nconst InfoBox =  ({title,cases,total,active,isRed, ...props}) => {\r\n return (\r\n  <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n   <CardContent>\r\n    <Typography className=\"infoBox__title\"  color=\"textSecondary\">\r\n     {title}\r\n    </Typography>\r\n\r\n    <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n    <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n     {total}\r\n    </Typography>\r\n   </CardContent>\r\n  </Card>\r\n )\r\n}\r\n\r\nexport default InfoBox;","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport { Circle,Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 450,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n   multiplier: 450,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 450,\r\n  },\r\n};\r\n\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a,b) => {\r\n   if(a.cases > b.cases){\r\n    return -1;\r\n   }\r\n   else{\r\n    return 1;\r\n   }\r\n  })\r\n\r\n  return sortedData;\r\n} \r\n\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataMap = (data, casesType = \"cases\") => {\r\n return data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n  \r\n}\r\n \r\n","export const osm = {\r\n maptiler : {\r\n  url : \"https://api.maptiler.com/maps/basic/256/{z}/{x}/{y}@2x.png?key=SwFxbVSPbF0mJyPzKBGz\",\r\n  attribution : '&copy;<a href=\"https://www.maptiler.com/copyright/\" target=\"_blank\">&copy; MapTiler</a> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">&copy; OpenStreetMap contributors</a>'\r\n }\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { Map as LeafletMap, TileLayer, Marker, useMap } from \"react-leaflet\";\r\n\r\nimport { showDataMap } from './util'\r\nimport {osm} from './osm-provider'\r\nimport \"./Map.css\" \r\n// import {ChangeView} from './ChangeView'\r\n\r\nconst Map = ({countries,casesType=\"cases\" ,center,zoom}) => {\r\n    const mapRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n     const {current ={}} = mapRef;\r\n     const {leafletElement : map} = current;\r\n\r\n     setTimeout(()=>{\r\n          map.flyTo(center);\r\n     },1)\r\n\r\n    },[center,zoom])\r\n\r\n return (\r\n  <div className=\"map\">\r\n   <LeafletMap  center={center} zoom={zoom}  \r\n        scrollWheelZoom={false} ref={mapRef} >\r\n     \r\n     <TileLayer\r\n          url={osm.maptiler.url}\r\n          attribution={osm.maptiler.attribution}\r\n     />\r\n\r\n      {\r\n      showDataMap(countries,casesType)\r\n      }\r\n   </LeafletMap>\r\n  </div>\r\n );\r\n}\r\n\r\nexport default Map;","import numeral from 'numeral';\r\nimport React from 'react'\r\nimport \"./Table.css\"\r\n\r\nconst Table = ({countries}) => {\r\n return (\r\n  <div className=\"table\">\r\n    {\r\n     countries.map(({country,cases})=>{\r\n       return (\r\n        <tr>\r\n         <td>{country}</td>\r\n         <td>\r\n          <strong>\r\n           {numeral( cases).format()}\r\n          </strong>\r\n         </td>\r\n         </tr>\r\n       );\r\n     })\r\n    }\r\n  </div>\r\n );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport \"./App.css\"\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n           callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType=\"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data[casesType]) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst  LineGraph = ({ casesType, ...props }) => {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}> \r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, {useEffect, useState} from 'react';\nimport  {FormControl, MenuItem, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from \"./InfoBox\"\nimport Map from \"./Map\"\nimport Table from \"./Table\"\nimport { sortData} from './util'\nimport LineGraph from \"./LineGraph\"\nimport \"leaflet/dist/leaflet.css\"\nimport { prettyPrintStat } from './util';\nimport './App.css'\n\nconst App = () => {\n \n  const [countries,setCountries] = useState([]);\n  const [defaultOption,setDefaultOption] = useState('worldwide');\n  const [countryInfo,setCountryInfo] = useState({});\n  const [tableData,setTableData] = useState([]);\n  const [mapCenter,setMapCenter] =useState({lat :34.80746 ,lng: -40.4796})\n  const [mapZoom,setMapZoom] =useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  \n  const fetchCountries = async (url) => {\n    const response = await fetch(url);\n    const data = await response.json();\n    setMapCountries(data);\n    const countriesArr = data.map( item => {\n      return {\n        id : item.countryInfo._id,\n        country : item.country,\n        value : item.countryInfo.iso2\n      }\n    })\n    const sortedData = sortData(data);\n    setTableData(sortedData);\n    setCountries(countriesArr);\n  }\n\n  const fetchSingleCountry = async (url) => {\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log()\n    if(data.countryInfo){ \n      setMapCenter({lat : data.countryInfo.lat, lng :data.countryInfo.long});\n      setMapZoom(4);\n    }\n    setCountryInfo(data);\n  }\n\n  const onCountryChange = (e) => {\n    const countryCode = e.target.value;\n    setDefaultOption(countryCode);\n\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    fetchSingleCountry(url);\n    if(countryCode == 'worldwide'){\n      setMapCenter({lat : 34.80746 , lng : -40.4796});\n      setMapZoom(3)\n    }\n  }\n\n  useEffect( () => {\n    fetchCountries(\"https://disease.sh/v3/covid-19/countries\");\n\n  \n  },[countries])\n\n\n  useEffect(()=>{\n    fetchSingleCountry(\"https://disease.sh/v3/covid-19/all\");\n  },[]);\n\n  return (\n    <div className=\"app\" > \n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n              <Select variant=\"outlined\" value={defaultOption}  onChange={onCountryChange}  className=\"app__select\">\n              <MenuItem value=\"worldwide\"> Worldwide</MenuItem>\n                {\n                  countries.map((country,index) => {\n                    return (\n                      <MenuItem key={index} value={country.value}> {country.country} </MenuItem>\n                    )\n                  })\n                }\n              </Select>\n          </FormControl>\n      </div>\n\n      <div className=\"app__stats\">\n          <InfoBox isRed\n           active= {casesType == \"cases\" }\n           onClick={ e=> setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={ prettyPrintStat( countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n\n          <InfoBox  active= {casesType == \"recovered\"}  onClick={ e=> setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat( countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n\n          <InfoBox isRed active= {casesType == \"deaths\"}  onClick={ e=> setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat( countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n      </div>\n\n        <Map casesType={casesType} countries={mapCountries} center ={mapCenter} zoom={mapZoom}/>\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide New {casesType.toUpperCase()}</h3>\n          <LineGraph className=\"app__graph\"  casesType={casesType}/>\n        </CardContent>\n      </Card>\n    \n    </div>\n  );  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}